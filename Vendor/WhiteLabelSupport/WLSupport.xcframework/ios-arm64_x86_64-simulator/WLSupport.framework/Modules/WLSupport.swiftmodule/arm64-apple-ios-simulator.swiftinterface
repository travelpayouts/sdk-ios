// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name WLSupport
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Combine
import CombineCocoa
import Foundation
import NeedleFoundation
import Swift
import UIKit
import WLCommon
import WLConfig
import WLNetwork
import WLUserInterface
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol ConfigurableTabBar : UIKit.UITabBarController {
  func configureTabBar(for traitCollection: UIKit.UITraitCollection)
}
extension WLSupport.ConfigurableTabBar {
  public func configureTabBar(for traitCollection: UIKit.UITraitCollection)
}
public protocol FlightsModuleCore : WLSupport.ModuleCore, WLSupport.TrackableScreen {
}
extension WLSupport.FlightsModuleCore {
  public var moduleIcon: WLSupport.ModuleIcon {
    get
  }
  public func trackOpen(from source: WLSupport.TrackableScreenSource)
}
public protocol InformationModuleCore : WLSupport.ModuleCore, WLSupport.TrackableScreen {
}
extension WLSupport.InformationModuleCore {
  public var moduleIcon: WLSupport.ModuleIcon {
    get
  }
  public func trackOpen(from source: WLSupport.TrackableScreenSource)
}
public protocol ModuleCore {
  var moduleIcon: WLSupport.ModuleIcon { get }
}
public struct ModuleIcon {
  public let inactive: UIKit.UIImage?
  public let active: UIKit.UIImage?
}
public func registerProviderFactories()
@_hasMissingDesignatedInitializers final public class ScreenProvider {
  public static let shared: WLSupport.ScreenProvider
  final public func webContaiverViewController(for url: Foundation.URL?) -> UIKit.UIViewController
  @objc deinit
}
public protocol TrackableScreen {
  func trackOpen(from source: WLSupport.TrackableScreenSource)
}
public enum TrackableScreenSource {
  case tabBar
  public static func == (a: WLSupport.TrackableScreenSource, b: WLSupport.TrackableScreenSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UIKit.UIColor {
  convenience public init(lightHex: Swift.String, darkHex: Swift.String)
}
public enum WhiteLabel {
  public static func configure(with configuration: WLConfig.Configuration)
}
extension WLSupport.TrackableScreenSource : Swift.Equatable {}
extension WLSupport.TrackableScreenSource : Swift.Hashable {}
