// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name WLDebug
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CombineExt
import Foundation
import NeedleFoundation
import RswiftResources
import SnapKit
import Swift
import UIKit
import WLCommon
import WLConfig
import WLPersistence
import WLUserInterface
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum Debug {
  public static var overridenAppearance: (any WLConfig.AppearanceConfiguration)? {
    get
  }
}
public func registerProviderFactories()
public let R: WLDebug._R
public struct _R {
  public let bundle: Foundation.Bundle
  public init(bundle: Foundation.Bundle)
  public var string: WLDebug._R.string {
    get
  }
  public var file: WLDebug._R.file {
    get
  }
  public func string(bundle: Foundation.Bundle) -> WLDebug._R.string
  public func string(locale: Foundation.Locale) -> WLDebug._R.string
  public func string(preferredLanguages: [Swift.String], locale: Foundation.Locale? = nil) -> WLDebug._R.string
  public func file(bundle: Foundation.Bundle) -> WLDebug._R.file
  public func validate() throws
  public struct project {
    public let developmentRegion: Swift.String
  }
  public struct string {
    public let bundle: Foundation.Bundle
    public let preferredLanguages: [Swift.String]?
    public let locale: Foundation.Locale?
    public init(bundle: Foundation.Bundle, preferredLanguages: [Swift.String]? = nil, locale: Foundation.Locale? = nil)
    public var debug: WLDebug._R.string.debug {
      get
    }
    public func debug(preferredLanguages: [Swift.String]) -> WLDebug._R.string.debug
    public struct debug {
      public let source: RswiftResources.StringResource.Source
      public init(source: RswiftResources.StringResource.Source)
      public var debug_ads_desc: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_base_color: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_corner_style: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_icon_style: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_palette: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_reset_descr: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_reset_title: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_settings_desc: RswiftResources.StringResource {
        get
      }
      public var debug_appearance_settings_title: RswiftResources.StringResource {
        get
      }
      public var debug_approval_required: RswiftResources.StringResource {
        get
      }
      public var debug_cancel: RswiftResources.StringResource {
        get
      }
      public var debug_cleanup_storage: RswiftResources.StringResource {
        get
      }
      public var debug_disable_ads: RswiftResources.StringResource {
        get
      }
      public var debug_enable_ads: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl_desc: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl_disable: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl_disable_desc: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl_with_mirored_text: RswiftResources.StringResource {
        get
      }
      public var debug_enable_pseudo_rtl_with_mirored_text_desc: RswiftResources.StringResource {
        get
      }
      public var debug_force_crash_desc: RswiftResources.StringResource {
        get
      }
      public var debug_force_crash_title: RswiftResources.StringResource {
        get
      }
      public var debug_force_crash_warning: RswiftResources.StringResource {
        get
      }
      public var debug_needs_application_restart: RswiftResources.StringResource {
        get
      }
      public var debug_ok: RswiftResources.StringResource {
        get
      }
      public var debug_push_token: RswiftResources.StringResource {
        get
      }
      public var debug_save: RswiftResources.StringResource {
        get
      }
      public var debug_title: RswiftResources.StringResource {
        get
      }
      public var debug_version: RswiftResources.StringResource {
        get
      }
    }
  }
  public struct file {
    public let bundle: Foundation.Bundle
    public init(bundle: Foundation.Bundle)
    public var privacyInfoXcprivacy: RswiftResources.FileResource {
      get
    }
  }
}
@_hasMissingDesignatedInitializers final public class ScreenProvider {
  public static let shared: WLDebug.ScreenProvider
  final public func debugViewController(pushTokenProvider: @escaping () -> Swift.String?) -> UIKit.UIViewController
  @objc deinit
}
